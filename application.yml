---
- hosts: 127.0.0.1
  connection: local
  become: yes
  
  tasks:
      - name: Create User
        user:
          name: "{{ lookup('env','APP_USER') }}"
          password: "{{ lookup('env','APP_PASS') }}"

      - name: Create Directory
        file:
          path: "/home/{{ lookup('env','APP_USER') }}/{{ lookup('env','PROJECT_DIR') }}/"
          state: directory

      - name: Copy Build to Project
        shell: "aws s3 cp s3://vmerh/spring.jar /home/{{ lookup('env','APP_USER') }}/{{ lookup('env','PROJECT_DIR') }}/spring.jar"
        environment:
          AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
          AWS_DEFAULT_REGION: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
          AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"

      - name: Lookup IP
        shell: "aws ec2 describe-instances --filters 'Name=tag:Name,Values=Database' --query 'Reservations[*].Instances[*].PrivateIpAddress' --output=text"
        environment:
          AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
          AWS_DEFAULT_REGION: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
          AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        register: database

      - name: Run Build
        shell: 'java -jar spring.jar &'
        args:
          chdir: "/home/{{ lookup('env','APP_USER') }}/{{ lookup('env','PROJECT_DIR') }}/"
        become_user: "{{ lookup('env','APP_USER') }}"
        environment:
          DB_HOST: '{{ database.stdout }}'
          DB_USER: "{{ lookup('env','DB_USER') }}"
          DB_PASS: "{{ lookup('env','DB_PASS') }}"
          DB_NAME: "{{ lookup('env','DB_NAME') }}"
          DB_PORT: "{{ lookup('env','DB_PORT') }}"

      - name: Lookup IP Public
        ipify_facts:
        register: ip

      - name: Pause 30 sec
        wait_for:
          timeout: 30
          host: '{{ ip.ansible_facts.ipify_public_ip }}'
          port: 8080

      - name: Check Healt
        uri:
          url: "http://{{ ip.ansible_facts.ipify_public_ip }}:8080/manage/health"
          return_content: yes
        register: health
     
      - name: Check Health
        debug: msg='Build Work!'
        when: health.json.status == "UP"
